package com.liamfrager.connect.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@Entity
@Table(name="post")
public class Post {
    // PROPERTIES //
    @Id @GeneratedValue
    private Integer id;
    
    @ManyToOne
    @JoinColumn
    private User user;
    private String content;
    private Long timestamp;
    

    // CONSTRUCTORS //
    public Post(){
    }
    /**
     * When posting a new post, the id can be generated by the database. In that case, a constructor without
     * id is needed.
     * @param user
     * @param content
     * @param timestamp
     */
    public Post(User user, String content, Long timestamp) {
        this.user = user;
        this.content = content;
        this.timestamp = timestamp;
    }
    /**
     * Whem retrieving a post from the database, all fields will be needed. In that case, a constructor with all
     * fields is needed.
     * @param id
     * @param user
     * @param content
     * @param timestamp
     */
    public Post(Integer id, User user, String content, Long timestamp) {
        this.id = id;
        this.user = user;
        this.content = content;
        this.timestamp = timestamp;
    }

    /**
     * Overriding the default equals() method adds functionality to tell when two objects are identical, allowing
     * Assert.assertEquals and List.contains to function.
     * @param obj the other object.
     * @return true if obj is equal to this object.
     */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Post other = (Post) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (content == null) {
			if (other.content != null)
				return false;
		} else if (!content.equals(other.content))
			return false;
		if (user == null) {
			if (other.user != null)
				return false;
		} else if (!user.equals(other.user))
			return false;
		if (timestamp == null) {
			if (other.timestamp != null)
				return false;
		} else if (!timestamp.equals(other.timestamp))
			return false;
		return true;
	}
}
