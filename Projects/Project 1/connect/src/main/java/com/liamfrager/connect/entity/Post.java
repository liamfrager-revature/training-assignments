package com.liamfrager.connect.entity;

import jakarta.persistence.*;

/**
 * This is a class that models a Post.
 *
 * You should NOT make any modifications to this class.
 */
@Entity
@Table(name="post")
public class Post {
    /**
     * An id for this post which will be automatically generated by the database.
     */
    @Column (name="postId")
    @Id @GeneratedValue
    private Integer postId;
    /**
     * The id for the user who has posted this post. We will assume that this is provided by the front-end of this
     * application.
     */
    @Column (name="postedBy")
    private Integer postedBy;
    /**
     * The text for this post- eg "this is my first post!". Must be not blank and under 255 characters
     */
    @Column (name="postText")
    private String postText;
    /**
     * The epoch time when this tweet was posted (number of seconds since Jan 1, 1970). Longs are large enough
     * to store this number. We will assume that this number is provided by the front-end of this application.
     */
    @Column (name="timePostedEpoch")
    private Long timePostedEpoch;
    /**
     * A default, no-args constructor, as well as correctly formatted getters and setters, are needed for
     * Jackson Objectmapper to work.
     */
    public Post(){
    }
    /**
     * When posting a new post, the id can be generated by the database. In that case, a constructor without
     * postId is needed.
     * @param postedBy
     * @param postText
     * @param timePostedEpoch
     */
    public Post(Integer postedBy, String postText, Long timePostedEpoch) {
        this.postedBy = postedBy;
        this.postText = postText;
        this.timePostedEpoch = timePostedEpoch;
    }
    /**
     * Whem retrieving a post from the database, all fields will be needed. In that case, a constructor with all
     * fields is needed.
     * @param postId
     * @param postedBy
     * @param postText
     * @param timePostedEpoch
     */
    public Post(Integer postId, Integer postedBy, String postText, Long timePostedEpoch) {
        this.postId = postId;
        this.postedBy = postedBy;
        this.postText = postText;
        this.timePostedEpoch = timePostedEpoch;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @return postId
     */
    public Integer getPostId() {
        return postId;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @param postId
     */
    public void setPostId(Integer postId) {
        this.postId = postId;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @return postedBy
     */
    public Integer getPostedBy() {
        return postedBy;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @param postedBy
     */
    public void setPostedBy(Integer postedBy) {
        this.postedBy = postedBy;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @return postText
     */
    public String getPostText() {
        return postText;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @param postText
     */
    public void setPostText(String postText) {
        this.postText = postText;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @return timePostedEpoch
     */
    public Long getTimePostedEpoch() {
        return timePostedEpoch;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @param timePostedEpoch
     */
    public void setTimePostedEpoch(Long timePostedEpoch) {
        this.timePostedEpoch = timePostedEpoch;
    }
    /**
     * Overriding the default equals() method adds functionality to tell when two objects are identical, allowing
     * Assert.assertEquals and List.contains to function.
     * @param o the other object.
     * @return true if o is equal to this object.
     */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Post other = (Post) obj;
		if (postId == null) {
			if (other.postId != null)
				return false;
		} else if (!postId.equals(other.postId))
			return false;
		if (postText == null) {
			if (other.postText != null)
				return false;
		} else if (!postText.equals(other.postText))
			return false;
		if (postedBy == null) {
			if (other.postedBy != null)
				return false;
		} else if (!postedBy.equals(other.postedBy))
			return false;
		if (timePostedEpoch == null) {
			if (other.timePostedEpoch != null)
				return false;
		} else if (!timePostedEpoch.equals(other.timePostedEpoch))
			return false;
		return true;
	}
	
    /**
     * Overriding the default toString() method allows for easy debugging.
     * @return a String representation of this class.
     */
    @Override
    public String toString() {
        return "Post{" +
                "postId=" + postId +
                ", postedBy=" + postedBy +
                ", postText='" + postText + '\'' +
                ", timePostedEpoch=" + timePostedEpoch +
                '}';
    }


}
