package com.liamfrager.connect.entity;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@Entity
@Table(name="user")
public class User {
    // PROPERTIES //
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer id;
    @Column(unique = true)
    private String username;
    @Column(unique = true)
    private String email;
    private String password;
    private byte[] pfp;
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Post> posts;
    @ManyToMany
    @JoinTable(
        name = "followers", // Name of the join table
        joinColumns = @JoinColumn(name = "followerID"), // Column for the follower
        inverseJoinColumns = @JoinColumn(name = "followeeID") // Column for the followee
    )
    private Set<User> following = new HashSet<>(); // Users this user is following

    @ManyToMany(mappedBy = "following")
    private Set<User> followers = new HashSet<>(); // Users following this user

    // CONSTRUCTORS //
    public User(){

    }
    /**
     * When posting a new User, the id can be generated by the database. In that case, a constructor without
     * id is needed.
     * @param username
     * @param email
     * @param password
     */
    public User(String username, String email, String password){
        this.username = username;
        this.email = email;
        this.password = password;
    }
    /**
     * Whem retrieving an User from the database, all fields will be needed. In that case, a constructor with all
     * fields is needed.
     * @param id
     * @param username
     * @param email
     * @param password
     * @param pfp
     */
    public User(Integer id, String username, String email, String password, byte[] pfp) {
        this.id = id;
        this.username = username;
        this.email = email;
        this.password = password;
        this.pfp = pfp;
    }


    /**
     * Overriding the default equals() method adds functionality to tell when two objects are identical, allowing
     * Assert.assertEquals and List.contains to function.
     * @param o the other object.
     * @return true if o is equal to this object.
     */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (password == null) {
			if (other.password != null)
				return false;
		} else if (!password.equals(other.password))
			return false;
        if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		if (username == null) {
			if (other.username != null)
				return false;
		} else if (!username.equals(other.username))
			return false;
		return true;
	}

    /**
     * Overriding the default toString() method allows for easy debugging.
     * @return a String representation of this class.
     */
    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", username='" + username + '\'' +
                ", email='" + email + '\'' +
                ", password='" + password + '\'' +
                '}';
    }
}
